<script src="~/data/employees.js"></script>
<script>
    let backendURL = "http://localhost:5000/"

    function cellTemplate(container, options) {
        let imgElement = document.createElement("img");
        imgElement.setAttribute("src", backendURL + options.value);
        container.append(imgElement);
    }

    function editCellTemplate(cellElement, cellInfo) {
        let buttonElement = document.createElement("div");
        buttonElement.classList.add("buttonClear");
        let buttonClear = $(buttonElement).dxButton({
            text: "Retry",
            visible: false,
            onClick: function () {
                // The retry UI/API is not implemented. Use a private API as shown at T611719.
                for (var i = 0; i < fileUploader._files.length; i++) {
                    delete fileUploader._files[i].uploadStarted;
                }
                fileUploader._uploadFiles();
            }
        }).dxButton("instance");

        let fileUploaderElement = document.createElement("div");
        let fileUploader = $(fileUploaderElement).dxFileUploader({
            multiple: false,
            accept: "image/*",
            uploadMode: "instantly",
            uploadUrl: backendURL + "FileUpload/post",
            onValueChanged: function (e) {
                let reader = new FileReader();
                reader.onload = function (e) {
                    imageElement.setAttribute('src', e.target.result);
                }
                reader.readAsDataURL(e.value[0]); // convert to base64 string
            },
            onUploaded: function (e) {
                cellInfo.setValue("images/employees/" + e.request.responseText);
                buttonClear.option("visible", false);
            },
            onUploadError: function (e) {
                let xhttp = e.request;
                if (xhttp.status === 400) {
                    e.message = e.error.responseText;
                }
                if (xhttp.readyState == 4 && xhttp.status == 0) {
                    e.message = "Connection refused";
                }
                buttonClear.option("visible", true);
            }
        }).dxFileUploader("instance");

        let imageElement = document.createElement("img");
        imageElement.classList.add("uploadedImage");
        imageElement.setAttribute('src', backendURL + cellInfo.value);

        cellElement.append(imageElement);
        cellElement.append(fileUploaderElement);
        cellElement.append(buttonElement);
    }
</script>

<style>
    #data-grid-demo {
        min-height: 530px;
        width: 1000px;
    }

    .dx-row img {
        height: 50px;
    }

    .buttonClear {
        margin-left: 7px;
    }

    .uploadedImage {
        height: 50px;
        margin-left: 7px;
        margin-bottom: 7px;
    }
</style>

@(Html.DevExtreme().DataGrid()
    .ID("gridContainer")
    .ShowBorders(true)
    .DataSource(new JS("employees"))
    .KeyExpr("ID")
    .Editing(e => e.Mode(GridEditMode.Popup)
            .AllowUpdating(true)
            .Popup(p => p
                .Title("Employee Info")
                .ShowTitle(true)
                .Width(700)
            )
            .Form(f => f.Items(items =>
            {
                items.AddGroup()
                    .ColCount(2)
                    .ColSpan(2)
                    .Items(groupItems =>
                    {
                        groupItems.AddSimple().DataField("Prefix");
                        groupItems.AddSimple().DataField("FirstName");
                        groupItems.AddSimple().DataField("LastName");
                        groupItems.AddSimple().DataField("Position");
                        groupItems.AddSimple().DataField("BirthDate");
                        groupItems.AddSimple().DataField("HireDate");
                    });

                items.AddGroup()
                    .Caption("Photo")
                    .ColCount(2)
                    .ColSpan(2)
                    .Items(groupItems =>
                    {
                        groupItems.AddSimple().DataField("Picture").ColSpan(2);
                    });
            }))
        )
    .Columns(columns => {
        columns.Add().DataField("Picture")
            .AllowFiltering(false)
            .AllowSorting(false)
            .CellTemplate(new JS("cellTemplate"))
            .EditCellTemplate(new JS("editCellTemplate"));

        columns.Add().DataField("Prefix")
            .Width(70);

        columns.Add().DataField("FirstName");

        columns.Add().DataField("LastName");

        columns.Add().DataField("Position");

        columns.Add().DataField("BirthDate").DataType(GridColumnDataType.Date);

        columns.Add().DataField("HireDate").DataType(GridColumnDataType.Date);
    })
)
